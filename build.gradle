plugins {
	id 'java'
	id 'idea'
	id 'org.springframework.boot' version '3.1.1'
	id 'io.spring.dependency-management' version '1.1.0'
}

group = 'me.jwkwon0817'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
	// Spring Boot Starter
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// Querydsl (Jakarta 분류자 사용)
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Jakarta Persistence API 추가
	compileOnly 'jakarta.persistence:jakarta.persistence-api:3.1.0'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api:3.1.0'

	// 데이터베이스
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

	// 테스트
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

// Querydsl 설정
def generatedDir = layout.buildDirectory.dir("generated/sources/annotationProcessor/java/main")

sourceSets.main.java.srcDir generatedDir

tasks.withType(JavaCompile).configureEach {
	options.annotationProcessorPath = configurations.annotationProcessor
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

idea {
	module {
		sourceDirs += generatedDir.get().asFile
		generatedSourceDirs += generatedDir.get().asFile
	}
}
